#!/usr/bin/python
"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal
numbers are all figurate (polygonal) numbers and are generated by the
following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n-1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n-1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n-3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n-2)	 	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
interesting properties.

1. The set is cyclic, in that the last two digits of each number is
the first two digits of the next number (including the last number
with the first).

2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281),
and pentagonal (P5,44=2882), is represented by a different number in
the set.

3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for
which each polygonal type: triangle, square, pentagonal, hexagonal,
heptagonal, and octagonal, is represented by a different number in the
set.
"""
from itertools import count


def cyclic(xs):
    ss = map(str, xs)
    for p, q in zip(ss, ss[1:]):
        if p[-2:] != q[:2]:
            return 0
    return 1


def nums(f):
    ret = []
    for n in count(0):
        v = f(n)
        if v >= 1000:
            if v > 9999:
                return ret
            ret.append(v)


triangles = nums(lambda n: n * (n+1) / 2)
squares = nums(lambda n: n * n)
pentagons = nums(lambda n: n * (3 * n - 1) / 2)
hexagons = nums(lambda n: n * (2 * n - 1))
heptagons = nums(lambda n: n * (5 * n - 3) / 2)
octagons = nums(lambda n: n * (3 * n - 2))

all_lists = [triangles, squares, pentagons, hexagons, heptagons, octagons]



def get_all_nums():
    all_nums = []
    for i, l in zip(count(0), all_lists):
        for n in l:
            all_nums.append((i, n))
    return all_nums


def pre(n): return str(n)[:2]
def suf(n): return str(n)[-2:]


def can_cycle(n, m):
    return pre(n) == suf(m) or pre(m) == suf(n)
 

num_to_poly = {}
for i, n in get_all_nums():
    num_to_poly.setdefault(n, []).append(i)
        

def get_polygons(n):
    return num_to_poly[n]


prefixes = {}
suffixes = {}
for _, n in get_all_nums():
    prefixes.setdefault(pre(n), []).append(n)
    suffixes.setdefault(suf(n), []).append(n)


def find_set(nums, polys):
    if(len(polys) == len(all_lists)):
        if suf(nums[-1]) == pre(nums[0]):
            return nums, polys
        return None, None

    n = nums[-1]
    for s in prefixes.get(suf(n), []):
        ps = num_to_poly[s]
        for p in [p for p in ps if p not in polys]:
            s = find_set(nums + [s], polys ^ set([p]))
            if s != (None, None):
                return s

    return None, None


for i, n in get_all_nums():
    nums, polys = find_set([n], set([i]))
    if nums:
        print nums, polys, sum(nums)
        break


